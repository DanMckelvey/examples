def zipGDB(inputGDB):
    gdbFile = str(inputGDB)
    outFile = gdbFile[0:-4] + '.zip'
    gdbName = os.path.basename(gdbFile)
    with zipfile.ZipFile(outFile, mode='w', compression=zipfile.ZIP_DEFLATED, allowZip64=True) as myzip:
        for f in os.listdir(gdbFile):
            if f[-5:] != '.lock':
                myzip.write(os.path.join(gdbFile, f), gdbName + '\\' + os.path.basename(f))
    print('Completed zipping: {}'.format(gdbFile))

def delete_zip(config, py_path):
    """ Deletes any file geodatabase that is older than the backup_days.
        Based off ESRIs function, edited by Dan McKelvey for zip files.
    """
    backup_days = int(config.get('Backup', 'Days'))
    backup_weeks = int(config.get('Backup', 'Weeks'))
    backup_months = int(config.get('Backup', 'Months'))
    backup_folder = config.get('Paths', 'Backup folder')
    sde_connection = config.get('Paths', 'SDE file')

    today = datetime.date.today()
    old_day = today - datetime.timedelta(days=backup_days)
    old_week = today - relativedelta(weeks=backup_weeks)
    old_month = today - relativedelta(months=backup_months)

    folder_path = os.path.join(py_path, backup_folder)
    files = os.listdir(os.path.join(py_path, backup_folder))

    for file in files:
        utilities.print_message(str(file),1)
        #------------------------------------------------------------------
        # Check if the directory is a geodatabase with a date in its name.
        #------------------------------------------------------------------
        if file[-4:] == '.zip':     
            numbers = re.findall(r'\d+', os.path.basename(file))
            try:
                gdb_date = numbers[-1]
                gdb_date = datetime.date(int(gdb_date[0:4]), int(gdb_date[4:6]), int(gdb_date[6:8]))
            except:
                utilities.print_message('Incorrect date format for {}'.format(file), 3)
                continue
            #-------------------------------------------------
            # Delete any gdb older than the months threshold.
            #-------------------------------------------------
            try:
                if gdb_date < old_month:
                        file_path = os.path.join(folder_path, file)
                        os.remove(file_path)
                elif gdb_date < old_week:
                    #----------------------------------------------------------------------------------------
                    # Where the backup is older than the weeks threshold but less than the months threshold,
                    # only keep the last week of the month backup.
                    #----------------------------------------------------------------------------------------
                    last_day = calendar.monthrange(old_week.year, old_week.month)[1]
                    if last_day - gdb_date.day > 6:
                        file_path = os.path.join(folder_path, file)
                        os.remove(file_path)
                elif gdb_date < old_day:                   
                    #--------------------------------------------------------------------------------------
                    # Where the backup is older than the days threshold but less than the weeks threshold,
                    # only keep the Sunday morning backup.
                    #--------------------------------------------------------------------------------------
                    if gdb_date.weekday() != 6:                        
                        file_path = os.path.join(folder_path, file)
                        os.remove(file_path)
            except Exception as e:
                tb = sys.exc_info()[2]
                msg = '{}: {}'.format(tb.tb_lineno, e.message)
                utilities.print_message(msg, 3)
                raise Exception(msg)
